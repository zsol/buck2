"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4163],{28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>a});var n=s(96540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}},62275:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"prelude/rules/shell/sh_test","title":"sh_test","description":"sh\\\\_test","source":"@site/../docs/prelude/rules/shell/sh_test.md","sourceDirName":"prelude/rules/shell","slug":"/prelude/rules/shell/sh_test","permalink":"/docs/prelude/rules/shell/sh_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"sh_binary","permalink":"/docs/prelude/rules/shell/sh_binary"},"next":{"title":"uncategorized","permalink":"/docs/prelude/rules/uncategorized/"}}');var i=s(74848),r=s(28453);s(56289);const l={},a="sh_test",o={},c=[{value:"sh_test",id:"sh_test-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"sh_test",children:"sh_test"})}),"\n",(0,i.jsx)(t.h2,{id:"sh_test-1",children:"sh_test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def sh_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _remote_test_execution_toolchain: str = "gh_facebook_buck2_shims_meta//:remote_test_execution",\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    args: list[str] = [],\n    constraint_overrides: list[None | str] = [],\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    env: dict[str, str] = {},\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    list_args: None | list[str] = None,\n    list_env: None | dict[str, str] = None,\n    platform_override: None | str = None,\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = None,\n    resources: list[str] = [],\n    run_args: list[str] = [],\n    run_env: dict[str, str] = {},\n    run_test_separately: bool = False,\n    test: None | str = None,\n    test_rule_timeout_ms: None | int = None,\n    type: None | str = None,\n) -> None\n'})}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.code,{children:"sh_test()"})," is a test rule that can pass results to the test runner by invoking a shell script."]}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"args"}),": The list of arguments to invoke this script with. These are literal values, and no shell interpolation is done."]}),"\n",(0,i.jsxs)(t.p,{children:["These can contain ",(0,i.jsx)(t.code,{children:"string parameter macros"}),"\n, for example, to give the location of a generated binary to the test script."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"env"}),": Environment variable overrides that should be used when running the script. The key is the variable name, and the value is its value."]}),"\n",(0,i.jsxs)(t.p,{children:["The values can contain ",(0,i.jsx)(t.code,{children:"string parameter macros"}),"\nsuch as the location of a generated binary to be used by the test script."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"test"}),": Either the path to the script (relative to the build file), or a ",(0,i.jsx)(t.code,{children:"build target"}),". This file must be executable in order to be run."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"type"}),": If provided, this will be sent to any configured ",(0,i.jsx)(t.code,{children:".buckconfig"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"NOTE:"})," This rule is not currently supported on Windows."]}),"\n",(0,i.jsx)(t.p,{children:"Examples:"}),"\n",(0,i.jsx)(t.p,{children:"This sh_test() fails if a string does not match a value."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'\n# $REPO/BUCK\nsh_test(\n    name = "script_pass",\n    test = "script.sh",\n    args = ["--pass"],\n)\n\nsh_test(\n    name = "script_fail",\n    test = "script.sh",\n    args = ["--fail"],\n)\n\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'\n# Create a simple script that prints out the resource\n$ cat > script.sh\n#!/bin/sh\nfor arg in $@; do\n  if [ "$arg" == "--pass" ]; then\n    echo "Passed"\n    exit 0;\n  fi\ndone\necho "Failed"\nexit 1\n\n# Make sure the script is executable\n$ chmod u+x script.sh\n\n# Run the script, and see that one test passes, one fails\n$ buck test //:script_pass //:script_fail\nFAILURE script.sh sh_test\nBuilding: finished in 0.0 sec (100%) 2/2 jobs, 0 updated\n  Total time: 0.0 sec\nTesting: finished in 0.0 sec (1 PASS/1 FAIL)\nRESULTS FOR //:script_fail //:script_pass\nFAIL    <100ms  0 Passed   0 Skipped   1 Failed   //:script_fail\nFAILURE script.sh sh_test\n====STANDARD OUT====\nFailed\n\nPASS    <100ms  1 Passed   0 Skipped   0 Failed   //:script_pass\nTESTS FAILED: 1 FAILURE\nFailed target: //:script_fail\nFAIL //:script_fail\n\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);