"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9324],{8291:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"prelude/rules/android/android_build_config","title":"android_build_config","description":"android\\\\build\\\\config","source":"@site/../docs/prelude/rules/android/android_build_config.md","sourceDirName":"prelude/rules/android","slug":"/prelude/rules/android/android_build_config","permalink":"/docs/prelude/rules/android/android_build_config","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"android_binary","permalink":"/docs/prelude/rules/android/android_binary"},"next":{"title":"android_bundle","permalink":"/docs/prelude/rules/android/android_bundle"}}');var s=i(74848),t=i(28453);i(56289);const l={},d="android_build_config",r={},o=[{value:"android_build_config",id:"android_build_config-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"android_build_config",children:"android_build_config"})}),"\n",(0,s.jsx)(n.h2,{id:"android_build_config-1",children:"android_build_config"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def android_build_config(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _android_toolchain: str = "gh_facebook_buck2_shims_meta//:android",\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _is_building_android_binary: bool = select({"prelude//os:building_android_binary": True, "DEFAULT": False}),\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java_for_android",\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    package: str = "",\n    values: list[str] = [],\n    values_file: None | str = None,\n) -> None\n'})}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"android_build_config()"})," rule is used to generate a ",(0,s.jsx)(n.code,{children:"BuildConfig"})," class with global configuration variables that other ",(0,s.jsx)(n.code,{children:"android_library()"})," rules can compile against. Currently, the only variable exposed by ",(0,s.jsx)(n.code,{children:"BuildConfig"})," is a global ",(0,s.jsx)(n.code,{children:"boolean"})," named ",(0,s.jsx)(n.code,{children:"DEBUG"}),", much like the ",(0,s.jsx)(n.code,{children:"BuildConfig.java"})," generated by the official Android build tools based on Gradle."]}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"package"}),": Name of the Java package to use in the generated ",(0,s.jsx)(n.code,{children:"BuildConfig.java"})," file. Most developers set this to the application id declared in the manifest via ",(0,s.jsx)(n.code,{children:'<manifest package="APP_ID">'}),". Example: ",(0,s.jsx)(n.code,{children:"com.facebook.orca"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"values"}),": List of strings that defines additional fields (and values) that should be declared in the generated ",(0,s.jsx)(n.code,{children:"BuildConfig.java"})," file. Like ",(0,s.jsx)(n.code,{children:"DEBUG"}),", the values will be non-constant-expressions that evaluate to the value specified in the file at compilation time. To override the values in an APK, specify build_config_values or build_config_values_file in ",(0,s.jsx)(n.code,{children:"android_binary()"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"values_file"}),": Optional path to a file that defines additional fields (and values) that should be declared in the generated ",(0,s.jsx)(n.code,{children:"BuildConfig.java"})," file. Like ",(0,s.jsx)(n.code,{children:"DEBUG"}),", the values will be non-constant-expressions that evaluate to the value specified in the file at compilation time. To override the values in an APK, specify build_config_values or build_config_values_file in ",(0,s.jsx)(n.code,{children:"android_binary()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Note that values_file can be a generated file, as can build_config_values_file as\ndemonstrated in the example below."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"details",children:"Details"}),"\n",(0,s.jsxs)(n.p,{children:["The fields in the generated ",(0,s.jsx)(n.code,{children:"BuildConfig"})," class will\nbe non-constant-expressions (see ",(0,s.jsx)(n.a,{href:"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.28",children:"JLS 15.28"}),").\nHowever, if ",(0,s.jsx)(n.code,{children:"BuildConfig"})," is packaged into an APK, it will\nbe replaced with a new version where:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The fields will be set to literal values (i.e., constant expressions)."}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"boolean BuildConfig.DEBUG"})," field will correspond to\nthat of the ",(0,s.jsx)(n.code,{children:"package_type"})," argument to the ",(0,s.jsx)(n.code,{children:"android_binary()"})," rule\nthat is packaging it."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["This transformation is done before ProGuard is applied (if applicable), so\nthat it can propagate constants from ",(0,s.jsx)(n.code,{children:"BuildConfig"})," and eliminate\ndead code."]}),"\n",(0,s.jsx)(n.p,{children:"Examples:"}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of an ",(0,s.jsx)(n.code,{children:"android_build_config()"})," rule that\nis transitively included by both ",(0,s.jsx)(n.em,{children:"debug"})," and ",(0,s.jsx)(n.em,{children:"release"})," versions\nof an ",(0,s.jsx)(n.code,{children:"android_binary()"})," rule. The value\nof ",(0,s.jsx)(n.code,{children:"com.example.pkg.BuildConfig.DEBUG"})," will be different in each APK\neven though they both transitively depend on the same ",(0,s.jsx)(n.code,{children:":build_config"})," rule."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\nandroid_build_config(\n  name = 'build_config',\n  package = 'com.example.pkg',\n  values = [\n    'String COMMIT_ID = \"0000000000000000000000000000000000000000\"',\n  ],\n)\n\n# The .java files in this library may contain references to the boolean\n# com.example.pkg.BuildConfig.DEBUG because :build_config is in the deps.\n# It could also reference BuildConfig.COMMIT_ID.\nandroid_library(\n  name = 'mylib',\n  srcs = glob(['src/**/*.java']),\n  deps = [\n    ':build_config',\n  ],\n)\n\nandroid_binary(\n  name = 'debug',\n  package_type = 'DEBUG',\n  keystore =  '//keystores:debug',\n  manifest = 'AndroidManifest.xml',\n  target = 'Google Inc.:Google APIs:19',\n  deps = [\n    ':mylib',\n  ],\n)\n\n# The contents of the file generated by this rule might be:\n#\n# String COMMIT_ID = \"7bf804bdf71fdbfc99cce3b155b3643f022c6fa4\"\n#\n# Note that the output of :build_config_release_values will be cached by Buck.\n# Assuming that generate_release_build_config.py depends on state that is not\n# expressed by its deps (which violates a fundamental invariant in Buck!), a\n# workaround is to ensure that the inputs to :build_config_release_values are\n# changed in some way before :release is built to ensure that the output from\n# :build_config_release_values is not pulled from cache. For example:\n#\n# $ buck build :release\n# $ uuidgen > dummy_state_file.txt\n# $ buck build :release\n#\n# This makes sure that generate_release_build_config.py is re-run before\n# :release is rebuilt. This is much cheaper than deleting your build cache\n# before rebuilding.\ngenrule(\n  name = 'build_config_release_values',\n  srcs = [ 'generate_release_build_config.py', 'dummy_state_file.txt' ],\n  bash = 'generate_release_build_config.py $OUT',\n  out = 'build_config_release_values.txt',\n)\n\nandroid_binary(\n  name = 'release',\n  package_type = 'RELEASE',\n  keystore =  '//keystores:release',\n  manifest = 'AndroidManifest.xml',\n  target = 'Google Inc.:Google APIs:19',\n  build_config_values_file = ':build_config_release_values',\n  deps = [\n    ':mylib',\n  ],\n)\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var a=i(96540);const s={},t=a.createContext(s);function l(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);