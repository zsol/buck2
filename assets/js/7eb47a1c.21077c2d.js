"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8565],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(96540);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}},62844:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"users/commands/starlark","title":"starlark","description":"This document provides an overview of the commands and options available under buck2 starlark.","source":"@site/../docs/users/commands/starlark.generated.md","sourceDirName":"users/commands","slug":"/users/commands/starlark","permalink":"/docs/users/commands/starlark","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"starlark","title":"starlark"},"sidebar":"main","previous":{"title":"server","permalink":"/docs/users/commands/server"},"next":{"title":"status","permalink":"/docs/users/commands/status"}}');var r=s(74848),l=s(28453);const c={id:"starlark",title:"starlark"},t="starlark",d={},o=[{value:"<code>buck2 starlark</code>",id:"buck2-starlark",level:2},{value:"Subcommands:",id:"subcommands",level:3},{value:"<code>buck2 starlark lint</code>",id:"buck2-starlark-lint",level:2},{value:"Arguments:",id:"arguments",level:3},{value:"Options:",id:"options",level:3},{value:"<code>buck2 starlark typecheck</code>",id:"buck2-starlark-typecheck",level:2},{value:"Arguments:",id:"arguments-1",level:3},{value:"Options:",id:"options-1",level:3},{value:"<code>buck2 starlark debug-attach</code>",id:"buck2-starlark-debug-attach",level:2},{value:"Options:",id:"options-2",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"starlark",children:"starlark"})}),"\n",(0,r.jsxs)(n.p,{children:["This document provides an overview of the commands and options available under ",(0,r.jsx)(n.code,{children:"buck2 starlark"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"buck2-starlark",children:(0,r.jsx)(n.code,{children:"buck2 starlark"})}),"\n",(0,r.jsx)(n.p,{children:"Run Starlark operations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage"}),": ",(0,r.jsx)(n.code,{children:"buck2 starlark <COMMAND>"})]}),"\n",(0,r.jsx)(n.h3,{id:"subcommands",children:"Subcommands:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"lint"}),": Run the Starlark linter."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"typecheck"}),": Run the Starlark typechecker."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"debug-attach"}),": Run the starlark debug adapter protocol server"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"buck2-starlark-lint",children:(0,r.jsx)(n.code,{children:"buck2 starlark lint"})}),"\n",(0,r.jsx)(n.p,{children:"Run the Starlark linter."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage"}),": ",(0,r.jsx)(n.code,{children:"buck2 starlark lint [OPTIONS] <PATH>..."})]}),"\n",(0,r.jsx)(n.h3,{id:"arguments",children:"Arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"<PATH>"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"options",children:"Options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-c, --config <SECTION.OPTION=VALUE>"}),"\nList of config options"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--config-file <PATH>"}),"\nList of config file paths"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"--fake-host <HOST>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"default"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"linux"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"macos"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"windows"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"--fake-arch <ARCH>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"default"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aarch64"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"x8664"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--fake-xcode-version <VERSION-BUILD>"}),"\nValue must be formatted as: version-build (e.g., 14.3.0-14C18 or 14.1-14B47b)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--reuse-current-config"}),"\nRe-uses any ",(0,r.jsx)(n.code,{children:"--config"})," values (inline or via modefiles) if there's a previous command, otherwise the flag is ignored."]}),"\n",(0,r.jsxs)(n.p,{children:["If there is a previous command and ",(0,r.jsx)(n.code,{children:"--reuse-current-config"})," is set, then the old config is used, ignoring any overrides."]}),"\n",(0,r.jsx)(n.p,{children:"If there is no previous command but the flag was set, then the flag is ignored, the command behaves as if the flag was not set at all."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--exit-when-different-state"}),"\nUsed for exiting a concurrent command when a different state is detected"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--preemptible <PREEMPTIBLE>"}),"\nUsed to configure when this command could be preempted by another command for the same isolation dir."]}),"\n",(0,r.jsx)(n.p,{children:"Normally, when you run two commands - from different terminals, say - buck2 will attempt to run them in parallel. However, if the two commands are based on different state, that is they either have different configs or different filesystem states, buck2 cannot run them in parallel. The default behavior in this case is to block the second command until the first completes."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"never"}),": (default) When another command starts that cannot run in parallel with this one, block that command"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"always"}),": When another command starts, interrupt this command, ",(0,r.jsx)(n.em,{children:"even if they could run in parallel"}),". There is no good reason to use this other than that it provides slightly nicer superconsole output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ondifferentstate"}),": When another command starts that cannot run in parallel with this one, interrupt this command"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--disable-starlark-types"}),"\nDisable runtime type checking in Starlark interpreter."]}),"\n",(0,r.jsx)(n.p,{children:"This option is not stable, and can be used only locally to diagnose evaluation performance problems."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--stack"}),"\nRecord or show target call stacks."]}),"\n",(0,r.jsx)(n.p,{children:"Starlark call stacks will be included in duplicate targets error."}),"\n",(0,r.jsxs)(n.p,{children:["If a command outputs targets (like ",(0,r.jsx)(n.code,{children:"targets"})," command), starlark call stacks will be printed after the targets."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--console <super|simple|...>"}),"\nWhich console to use for this command"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Default value: ",(0,r.jsx)(n.code,{children:"auto"})]}),"\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"auto"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"none"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"simple"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"simplenotty"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"simpletty"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"super"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--ui <UI>"}),"\nConfigure additional superconsole ui components."]}),"\n",(0,r.jsx)(n.p,{children:"Accepts a comma-separated list of superconsole components to add. Possible values are:"}),"\n",(0,r.jsx)(n.p,{children:"dice - shows information about evaluated dice nodes debugevents - shows information about the flow of events from buckd"}),"\n",(0,r.jsx)(n.p,{children:"These components can be turned on/off interactively. Press 'h' for help when superconsole is active."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"dice"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"debugevents"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"io"}),": I/O panel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"re"}),": RE panel"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--no-interactive-console"}),"\nDisable console interactions"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--event-log <PATH>"}),"\nWrite events to this log file"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--write-build-id <PATH>"}),"\nWrite command invocation id into this file"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--unstable-write-invocation-record <PATH>"}),"\nWrite the invocation record (as JSON) to this path. No guarantees whatsoever are made regarding the stability of the format"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--command-report-path <PATH>"}),"\nWrite the command report to this path. A command report is always written to ",(0,r.jsx)(n.code,{children:"buck-out/v2/<uuid>/command_report"})," even without this flag"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"buck2-starlark-typecheck",children:(0,r.jsx)(n.code,{children:"buck2 starlark typecheck"})}),"\n",(0,r.jsx)(n.p,{children:"Run the Starlark typechecker."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage"}),": ",(0,r.jsx)(n.code,{children:"buck2 starlark typecheck [OPTIONS] <PATH>..."})]}),"\n",(0,r.jsx)(n.h3,{id:"arguments-1",children:"Arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"<PATH>"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"options-1",children:"Options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-c, --config <SECTION.OPTION=VALUE>"}),"\nList of config options"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--config-file <PATH>"}),"\nList of config file paths"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"--fake-host <HOST>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"default"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"linux"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"macos"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"windows"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"--fake-arch <ARCH>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"default"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aarch64"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"x8664"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--fake-xcode-version <VERSION-BUILD>"}),"\nValue must be formatted as: version-build (e.g., 14.3.0-14C18 or 14.1-14B47b)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--reuse-current-config"}),"\nRe-uses any ",(0,r.jsx)(n.code,{children:"--config"})," values (inline or via modefiles) if there's a previous command, otherwise the flag is ignored."]}),"\n",(0,r.jsxs)(n.p,{children:["If there is a previous command and ",(0,r.jsx)(n.code,{children:"--reuse-current-config"})," is set, then the old config is used, ignoring any overrides."]}),"\n",(0,r.jsx)(n.p,{children:"If there is no previous command but the flag was set, then the flag is ignored, the command behaves as if the flag was not set at all."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--exit-when-different-state"}),"\nUsed for exiting a concurrent command when a different state is detected"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--preemptible <PREEMPTIBLE>"}),"\nUsed to configure when this command could be preempted by another command for the same isolation dir."]}),"\n",(0,r.jsx)(n.p,{children:"Normally, when you run two commands - from different terminals, say - buck2 will attempt to run them in parallel. However, if the two commands are based on different state, that is they either have different configs or different filesystem states, buck2 cannot run them in parallel. The default behavior in this case is to block the second command until the first completes."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"never"}),": (default) When another command starts that cannot run in parallel with this one, block that command"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"always"}),": When another command starts, interrupt this command, ",(0,r.jsx)(n.em,{children:"even if they could run in parallel"}),". There is no good reason to use this other than that it provides slightly nicer superconsole output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ondifferentstate"}),": When another command starts that cannot run in parallel with this one, interrupt this command"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--disable-starlark-types"}),"\nDisable runtime type checking in Starlark interpreter."]}),"\n",(0,r.jsx)(n.p,{children:"This option is not stable, and can be used only locally to diagnose evaluation performance problems."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--stack"}),"\nRecord or show target call stacks."]}),"\n",(0,r.jsx)(n.p,{children:"Starlark call stacks will be included in duplicate targets error."}),"\n",(0,r.jsxs)(n.p,{children:["If a command outputs targets (like ",(0,r.jsx)(n.code,{children:"targets"})," command), starlark call stacks will be printed after the targets."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--console <super|simple|...>"}),"\nWhich console to use for this command"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Default value: ",(0,r.jsx)(n.code,{children:"auto"})]}),"\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"auto"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"none"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"simple"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"simplenotty"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"simpletty"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"super"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--ui <UI>"}),"\nConfigure additional superconsole ui components."]}),"\n",(0,r.jsx)(n.p,{children:"Accepts a comma-separated list of superconsole components to add. Possible values are:"}),"\n",(0,r.jsx)(n.p,{children:"dice - shows information about evaluated dice nodes debugevents - shows information about the flow of events from buckd"}),"\n",(0,r.jsx)(n.p,{children:"These components can be turned on/off interactively. Press 'h' for help when superconsole is active."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"dice"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"debugevents"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"io"}),": I/O panel"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"re"}),": RE panel"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--no-interactive-console"}),"\nDisable console interactions"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--event-log <PATH>"}),"\nWrite events to this log file"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--write-build-id <PATH>"}),"\nWrite command invocation id into this file"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--unstable-write-invocation-record <PATH>"}),"\nWrite the invocation record (as JSON) to this path. No guarantees whatsoever are made regarding the stability of the format"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--command-report-path <PATH>"}),"\nWrite the command report to this path. A command report is always written to ",(0,r.jsx)(n.code,{children:"buck-out/v2/<uuid>/command_report"})," even without this flag"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"buck2-starlark-debug-attach",children:(0,r.jsx)(n.code,{children:"buck2 starlark debug-attach"})}),"\n",(0,r.jsx)(n.p,{children:"Run the starlark debug adapter protocol server"}),"\n",(0,r.jsx)(n.p,{children:"This forwards requests received on stdin to a debug server running in the buck daemon. DAP events and responses are returned from the daemon and sent to this command's stdout."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage"}),": ",(0,r.jsx)(n.code,{children:"buck2 starlark debug-attach [OPTIONS]"})]}),"\n",(0,r.jsx)(n.h3,{id:"options-2",children:"Options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-c, --config <SECTION.OPTION=VALUE>"}),"\nList of config options"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--config-file <PATH>"}),"\nList of config file paths"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"--fake-host <HOST>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"default"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"linux"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"macos"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"windows"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"--fake-arch <ARCH>"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"default"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"aarch64"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"x8664"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--fake-xcode-version <VERSION-BUILD>"}),"\nValue must be formatted as: version-build (e.g., 14.3.0-14C18 or 14.1-14B47b)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--reuse-current-config"}),"\nRe-uses any ",(0,r.jsx)(n.code,{children:"--config"})," values (inline or via modefiles) if there's a previous command, otherwise the flag is ignored."]}),"\n",(0,r.jsxs)(n.p,{children:["If there is a previous command and ",(0,r.jsx)(n.code,{children:"--reuse-current-config"})," is set, then the old config is used, ignoring any overrides."]}),"\n",(0,r.jsx)(n.p,{children:"If there is no previous command but the flag was set, then the flag is ignored, the command behaves as if the flag was not set at all."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--exit-when-different-state"}),"\nUsed for exiting a concurrent command when a different state is detected"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--preemptible <PREEMPTIBLE>"}),"\nUsed to configure when this command could be preempted by another command for the same isolation dir."]}),"\n",(0,r.jsx)(n.p,{children:"Normally, when you run two commands - from different terminals, say - buck2 will attempt to run them in parallel. However, if the two commands are based on different state, that is they either have different configs or different filesystem states, buck2 cannot run them in parallel. The default behavior in this case is to block the second command until the first completes."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Possible values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"never"}),": (default) When another command starts that cannot run in parallel with this one, block that command"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"always"}),": When another command starts, interrupt this command, ",(0,r.jsx)(n.em,{children:"even if they could run in parallel"}),". There is no good reason to use this other than that it provides slightly nicer superconsole output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ondifferentstate"}),": When another command starts that cannot run in parallel with this one, interrupt this command"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--disable-starlark-types"}),"\nDisable runtime type checking in Starlark interpreter."]}),"\n",(0,r.jsx)(n.p,{children:"This option is not stable, and can be used only locally to diagnose evaluation performance problems."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--stack"}),"\nRecord or show target call stacks."]}),"\n",(0,r.jsx)(n.p,{children:"Starlark call stacks will be included in duplicate targets error."}),"\n",(0,r.jsxs)(n.p,{children:["If a command outputs targets (like ",(0,r.jsx)(n.code,{children:"targets"})," command), starlark call stacks will be printed after the targets."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--event-log <PATH>"}),"\nWrite events to this log file"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--write-build-id <PATH>"}),"\nWrite command invocation id into this file"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--unstable-write-invocation-record <PATH>"}),"\nWrite the invocation record (as JSON) to this path. No guarantees whatsoever are made regarding the stability of the format"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--command-report-path <PATH>"}),"\nWrite the command report to this path. A command report is always written to ",(0,r.jsx)(n.code,{children:"buck-out/v2/<uuid>/command_report"})," even without this flag"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);