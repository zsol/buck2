"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9870],{8064:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"prelude/rules/android/android_instrumentation_test","title":"android_instrumentation_test","description":"android\\\\instrumentation\\\\test","source":"@site/../docs/prelude/rules/android/android_instrumentation_test.md","sourceDirName":"prelude/rules/android","slug":"/prelude/rules/android/android_instrumentation_test","permalink":"/docs/prelude/rules/android/android_instrumentation_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"android_instrumentation_apk","permalink":"/docs/prelude/rules/android/android_instrumentation_apk"},"next":{"title":"android_library","permalink":"/docs/prelude/rules/android/android_library"}}');var i=n(74848),r=n(28453);n(56289);const a={},o="android_instrumentation_test",d={},l=[{value:"android_instrumentation_test",id:"android_instrumentation_test-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"android_instrumentation_test",children:"android_instrumentation_test"})}),"\n",(0,i.jsx)(t.h2,{id:"android_instrumentation_test-1",children:"android_instrumentation_test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'def android_instrumentation_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _android_emulators: None | str | (str, str) = None,\n    _android_toolchain: str = "gh_facebook_buck2_shims_meta//:android",\n    _apple_platforms: dict[str, str] = {},\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _java_test_toolchain: str = "gh_facebook_buck2_shims_meta//:java_for_host_test",\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java_for_android",\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    apk: str,\n    clear_package_data: bool = False,\n    collect_tombstones: bool = False,\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    disable_animations: bool = False,\n    env: dict[str, str] = {},\n    extra_instrumentation_args: None | dict[str, str] = None,\n    instrumentation_test_listener: None | str = None,\n    instrumentation_test_listener_class: None | str = None,\n    is_self_instrumenting: bool = False,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    log_extractors: dict[str, str] = {},\n    meta_internal_extra_params: None | dict[str, typing.Any] = None,\n    re_caps: None | dict[str, dict[str, str]] = None,\n    re_use_case: None | dict[str, str] = None,\n    record_video: bool = False,\n    test_rule_timeout_ms: None | int = None,\n) -> None\n'})}),"\n",(0,i.jsxs)(t.p,{children:["An ",(0,i.jsx)(t.code,{children:"android_instrumentation_test()"})," rule is used to define apks that should be used to run Android instrumentation tests."]}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"_android_emulators"}),': If provided, local resource of "android_emulators" type will be required to run this test locally and this target will be used to manage it. If omitted, local resource of "android_emulators" type will be ignored even if requested by the test runner.']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"apk"}),": The APK containing the tests. Can be an ",(0,i.jsx)(t.code,{children:"android_binary()"}),", an ",(0,i.jsx)(t.code,{children:"apk_genrule()"})," or an ",(0,i.jsx)(t.code,{children:"android_instrumentation_apk()"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"clear_package_data"}),": Runs ",(0,i.jsx)(t.code,{children:"pm clear"})," on the app and test packages before the test run if set to True."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"collect_tombstones"}),": Checks whether the test generated any tombstones, and downloads them from the emulator if true."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"disable_animations"}),": Disables animations on the emulator if set to True."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"labels"}),": A list of labels to be applied to these tests. These labels are arbitrary text strings and have no meaning within buck itself. They can, however, have meaning for you as a test author (e.g., ",(0,i.jsx)(t.code,{children:"smoke"})," or ",(0,i.jsx)(t.code,{children:"fast"}),"). A label can be used to filter or include a specific test rule when executing ",(0,i.jsx)(t.code,{children:"buck test"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"record_video"}),": Record video of test run and collect it as TRA"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"test_rule_timeout_ms"}),": If set specifies the maximum amount of time (in milliseconds) in which all of the tests in this rule should complete. This overrides the default ",(0,i.jsx)(t.code,{children:"rule_timeout"})," if any has been specified in ",(0,i.jsx)(t.code,{children:".buckconfig"})," ."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,i.jsx)(t.p,{children:"Examples:"}),"\n",(0,i.jsxs)(t.p,{children:["Here is an example of an ",(0,i.jsx)(t.code,{children:"android_instrumentation_test()"}),"\nrule that tests an ",(0,i.jsx)(t.code,{children:"android_binary()"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\nandroid_binary(\n  name = 'messenger',\n  manifest = 'AndroidManifest.xml',\n  keystore = '//keystores:prod',\n  package_type = 'release',\n  proguard_config = 'proguard.cfg',\n  deps = [\n    ...\n  ],\n)\n\nandroid_instrumentation_apk(\n  name = 'messenger_test',\n  manifest = 'AndroidInstrumentationManifest.xml',\n  apk = ':messenger',\n  deps = [\n    ...\n  ],\n)\n\nandroid_instrumentation_test(\n  name = 'messenger_instrumentation_test',\n  apk = ':messenger_test',\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);