"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5643],{24544:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"prelude/rules/python/cxx_python_extension","title":"cxx_python_extension","description":"cxx\\\\python\\\\extension","source":"@site/../docs/prelude/rules/python/cxx_python_extension.md","sourceDirName":"prelude/rules/python","slug":"/prelude/rules/python/cxx_python_extension","permalink":"/docs/prelude/rules/python/cxx_python_extension","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"python","permalink":"/docs/prelude/rules/python/"},"next":{"title":"prebuilt_python_library","permalink":"/docs/prelude/rules/python/prebuilt_python_library"}}');var n=t(74848),i=t(28453);t(56289);const o={},l="cxx_python_extension",a={},c=[{value:"cxx_python_extension",id:"cxx_python_extension-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"cxx_python_extension",children:"cxx_python_extension"})}),"\n",(0,n.jsx)(s.h2,{id:"cxx_python_extension-1",children:"cxx_python_extension"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def cxx_python_extension(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _cxx_hacks: str = "prelude//cxx/tools:cxx_hacks",\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    _meta_apple_library_validation_enabled: bool = False,\n    _python_internal_tools: str = "prelude//python/tools:python_internal_tools",\n    _python_toolchain: str = "gh_facebook_buck2_shims_meta//:python",\n    _target_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    allow_cache_upload: None | bool = None,\n    allow_embedding: bool = True,\n    allow_suffixing: bool = True,\n    archive_allow_cache_upload: bool = False,\n    auto_link_groups: bool = False,\n    base_module: None | str = None,\n    bridging_header: None | str = None,\n    can_be_asset: None | bool = None,\n    compiler_flags: list[str] = [],\n    contacts: list[str] = [],\n    coverage_instrumentation_compiler_flags: list[str] = [],\n    cuda_compile_style: str = "mono",\n    cxx_runtime_type: None | str = None,\n    default_host_platform: None | str = None,\n    default_platform: None | str = None,\n    defaults: dict[str, str] = {},\n    deffile: None | str = None,\n    deps: list[str] = [],\n    devirt_enabled: bool = False,\n    diagnostics: dict[str, str] = {},\n    executable_name: None | str = None,\n    export_header_unit: None | str = None,\n    export_header_unit_filter: list[str] = [],\n    exported_deps: list[str] = [],\n    exported_header_style: str = "local",\n    exported_headers: list[str] | dict[str, str] = [],\n    exported_lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    exported_lang_preprocessor_flags: dict[str, list[str]] = {},\n    exported_linker_flags: list[str] = [],\n    exported_needs_coverage_instrumentation: bool = False,\n    exported_platform_deps: list[(str, list[str])] = [],\n    exported_platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    exported_platform_linker_flags: list[(str, list[str])] = [],\n    exported_platform_preprocessor_flags: list[(str, list[str])] = [],\n    exported_post_linker_flags: list[str] = [],\n    exported_post_platform_linker_flags: list[(str, list[str])] = [],\n    exported_preprocessor_flags: list[str] = [],\n    extra_xcode_files: list[str] = [],\n    extra_xcode_sources: list[str] = [],\n    fat_lto: bool = False,\n    focused_list_target: None | str = None,\n    force_static: None | bool = None,\n    frameworks: list[str] = [],\n    header_namespace: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    headers_as_raw_headers_mode: None | str = None,\n    include_directories: list[str] = [],\n    include_in_android_merge_map_output: bool = True,\n    labels: list[str] = [],\n    lang_compiler_flags: dict[str, list[str]] = {},\n    lang_platform_compiler_flags: dict[str, list[(str, list[str])]] = {},\n    lang_platform_preprocessor_flags: dict[str, list[(str, list[str])]] = {},\n    lang_preprocessor_flags: dict[str, list[str]] = {},\n    libraries: list[str] = [],\n    licenses: list[str] = [],\n    link_group: None | str = None,\n    link_group_map: None | str | list[(str, list[(None | str | list[None | str], str, None | str | list[str], None | str)], None | dict[str, typing.Any])] = None,\n    link_ordering: None | str = None,\n    link_style: None | str = None,\n    link_whole: bool = True,\n    linker_extra_outputs: list[str] = [],\n    linker_flags: list[str] = [],\n    local_linker_flags: list[str] = [],\n    module_name: None | str = None,\n    platform_compiler_flags: list[(str, list[str])] = [],\n    platform_deps: list[(str, list[str])] = [],\n    platform_headers: list[(str, list[str] | dict[str, str])] = [],\n    platform_linker_flags: list[(str, list[str])] = [],\n    platform_preprocessor_flags: list[(str, list[str])] = [],\n    platform_srcs: list[(str, list[str | (str, list[str])])] = [],\n    post_linker_flags: list[str] = [],\n    post_platform_linker_flags: list[(str, list[str])] = [],\n    precompiled_header: None | str = None,\n    preferred_linkage: str = "any",\n    prefix_header: None | str = None,\n    preprocessor_flags: list[str] = [],\n    public_include_directories: list[str] = [],\n    public_system_include_directories: list[str] = [],\n    raw_headers: list[str] = [],\n    raw_headers_as_headers_mode: None | str = None,\n    reexport_all_header_dependencies: None | bool = None,\n    resources: list[str] | dict[str, str] = [],\n    sdk_modules: list[str] = [],\n    separate_debug_info: bool = False,\n    soname: None | str = None,\n    srcs: list[str | (str, list[str])] = [],\n    static_library_basename: None | str = None,\n    suffix_all: bool = True,\n    suffix_exclude_rtti: bool = False,\n    support_shlib_interfaces: bool = True,\n    supported_platforms_regex: None | str = None,\n    supports_merged_linking: None | bool = None,\n    thin_lto: bool = False,\n    type_stub: None | str = None,\n    use_archive: None | bool = None,\n    use_header_units: bool = False,\n    used_by_wrap_script: bool = False,\n    uses_cxx_explicit_modules: bool = False,\n    uses_explicit_modules: bool = False,\n    version: None | str = None,\n    version_universe: None | str = None,\n    weak_framework_names: list[str] = [],\n) -> None\n'})}),"\n",(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.code,{children:"cxx_python_extension()"})," rule is a variant of a C/C++ library which is built as a Python module. As such, it has a module name formed by the ",(0,n.jsx)(s.code,{children:"base_module"})," parameter and the rule name."]}),"\n",(0,n.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"name"}),": name of the target"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"base_module"}),": The package in which the specified source files and resources should reside in their final location in the top-level binary. If unset, Buck uses the project-relative directory that contains the BUCK file."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"compiler_flags"}),": Flags to use when compiling any of the above sources (which require compilation)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"deps"}),": Other rules that list ",(0,n.jsx)(s.code,{children:"srcs"})," from which this rule imports."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"header_namespace"}),": A path prefix when including headers of this target. Defaults to the path from the root of the repository to the directory where this target is defined. Can contain forward slashes (",(0,n.jsx)(s.code,{children:"/"}),"), but cannot start with one. See ",(0,n.jsx)(s.code,{children:"headers"})," for more information."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"headers"}),": The set of header files that are made available for inclusion to the source files in this target. These should be specified as either a list of header files or a dictionary of header names to header files. The header name can contain forward slashes (",(0,n.jsx)(s.code,{children:"/"}),"). The headers can be included with ",(0,n.jsx)(s.code,{children:'#include "$HEADER_NAMESPACE/$HEADER_NAME"'})," or ",(0,n.jsx)(s.code,{children:"#include <$HEADER_NAMESPACE/$HEADER_NAME>"})," , where ",(0,n.jsx)(s.code,{children:"$HEADER_NAMESPACE"})," is the value of the target's ",(0,n.jsx)(s.code,{children:"header_namespace"}),"  attribute, and ",(0,n.jsx)(s.code,{children:"$HEADER_NAME"})," is the header name if specified, and the filename of the header file otherwise. See ",(0,n.jsx)(s.code,{children:"header_namespace"})," for more information."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"labels"}),": Set of arbitrary strings which allow you to annotate a ",(0,n.jsx)(s.code,{children:"build rule"})," with tags that can be searched for over an entire dependency tree using ",(0,n.jsx)(s.code,{children:"buck query()"})," ."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"link_style"}),": Determines whether to build and link this rule's dependencies statically or dynamically. Can be either ",(0,n.jsx)(s.code,{children:"static"}),", ",(0,n.jsx)(s.code,{children:"static_pic"})," or ",(0,n.jsx)(s.code,{children:"shared"}),". Note: since shared libraries re-export its dependencies, depending on multiple shared libraries which themselves have overlapping static dependencies may cause problems if they init using global state."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"linker_extra_outputs"}),": Declares extra outputs that the linker emits. These identifiers can be used in ",(0,n.jsx)(s.code,{children:"$(output ...)"})," macros in ",(0,n.jsx)(s.code,{children:"linker_flags"})," to interpolate the output path into the linker command line. Useful for custom linkers that emit extra output files."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"linker_flags"}),": Flags to add to the linker command line whenever the output from this rule is used in a link operation, such as linked into an executable or a shared library."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"local_linker_flags"}),": Flags to add to the linker command line whenever the output from this rule is used in a link operation ",(0,n.jsx)(s.em,{children:"driven by this rule"})," (e.g. when this rule links a shared library, but ",(0,n.jsx)(s.em,{children:"not"})," when the output is linked into a shared library by another rule's link group links)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"platform_compiler_flags"}),": Platform specific compiler flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when compiling the target's sources. See ",(0,n.jsx)(s.code,{children:"compiler_flags"})," for more information."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"platform_headers"}),": Platform specific header files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of header files or a dictionary of header names to header files that will be made available for inclusion to the source files in the target if the platform matches the regex. See ",(0,n.jsx)(s.code,{children:"headers"})," for more information."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"platform_linker_flags"}),": Platform-specific linker flags. This argument is specified as a list of pairs where the first element in each pair is an un-anchored regex against which the platform name is matched. The regex should use ",(0,n.jsx)(s.code,{children:"java.util.regex.Pattern"})," syntax. The second element in each pair is a list of linker flags. If the regex matches the platform, these flags are added to the linker command line when the output from this rule is used in a link operation."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"platform_preprocessor_flags"}),": Platform specific preprocessor flags. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is a list of flags to use when preprocessing the target's sources. See ",(0,n.jsx)(s.code,{children:"preprocessor_flags"})," for more information."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"platform_srcs"}),": Platform specific source files. These should be specified as a list of pairs where the first element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name is matched, and the second element is either a list of source files or a list of tuples of source files and a list of compilation flags to be preprocessed, compiled and assembled if the platform matches the regex. See ",(0,n.jsx)(s.code,{children:"srcs"})," for more information."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"preprocessor_flags"}),": Flags to use when preprocessing any of the above sources (which require preprocessing)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"srcs"}),": The set of C, C++, Objective-C, Objective-C++, or assembly source files to be preprocessed, compiled, and assembled by this rule. We determine which stages to run on each input source based on its file extension. See the ",(0,n.jsx)(s.a,{href:"https://gcc.gnu.org/onlinedocs/gcc/Overall-Options.html",children:"GCC documentation"})," for more detail on how file extensions are interpreted. Each element can be either a string specifying a source file (e.g. ",(0,n.jsx)(s.code,{children:"''"}),") or a tuple of a string specifying a source file and a list of compilation flags (e.g. ",(0,n.jsx)(s.code,{children:"('', ['-Wall', '-Werror'])"})," ). In the latter case the specified flags will be used in addition to the rule's other flags when preprocessing and compiling that file (if applicable)."]}),"\n"]}),"\n",(0,n.jsx)(s.h4,{id:"details",children:"Details"}),"\n",(0,n.jsx)(s.p,{children:"Examples:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"\n# A rule that builds a Python extension from a single .cpp file.\ncxx_python_extension(\n  name = 'mymodule',\n  base_module = 'foo.bar',\n  srcs = [\n    'mymodule.cpp',\n  ],\n)\n\n# A library rule which has a single source importing the above extension.\npython_library(\n  name = 'utils',\n  srcs = [\n    'utils.py',\n  ],\n  deps = [\n    ':mymodule',\n  ],\n)\n\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"\n## The `utils.py` source, wrapped by the `utils` rule above.\n\n## Import the C/C++ extension build above.\nfrom foo.bar import mymodule\n\n...\n\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>l});var r=t(96540);const n={},i=r.createContext(n);function o(e){const s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);