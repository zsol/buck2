"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4307],{24912:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"prelude/rules/java/java_binary","title":"java_binary","description":"java\\\\_binary","source":"@site/../docs/prelude/rules/java/java_binary.md","sourceDirName":"prelude/rules/java","slug":"/prelude/rules/java/java_binary","permalink":"/docs/prelude/rules/java/java_binary","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"java_annotation_processor","permalink":"/docs/prelude/rules/java/java_annotation_processor"},"next":{"title":"java_library","permalink":"/docs/prelude/rules/java/java_library"}}');var a=s(74848),t=s(28453);s(56289);const r={},l="java_binary",o={},d=[{value:"java_binary",id:"java_binary-1",level:2},{value:"Parameters",id:"parameters",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"java_binary",children:"java_binary"})}),"\n",(0,a.jsx)(n.h2,{id:"java_binary-1",children:"java_binary"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def java_binary(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _is_building_android_binary: bool = select({"prelude//os:building_android_binary": True, "DEFAULT": False}),\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java",\n    base_dep: None | str = None,\n    blocklist: list[str] = [],\n    build_manifest: None | str = None,\n    concat_deps: bool = False,\n    contacts: list[str] = [],\n    default_cxx_platform: None | str = None,\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    do_not_create_inner_jar: bool = False,\n    generate_wrapper: bool = False,\n    incremental_target_prefix: None | str = None,\n    java_args_for_run_info: list[str] = [],\n    java_runtime: None | str = None,\n    java_version: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    main_class: None | str = None,\n    manifest_file: None | str = None,\n    meta_inf_directory: None | str = None,\n    proguard_config: None | str = None,\n    proguard_jvm_args: list[str] = [],\n    proguard_library_jars: list[str] = [],\n) -> None\n'})}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"java_binary()"})," rule is used to create a JAR file of the compiled .class files and resources of the ",(0,a.jsx)(n.code,{children:"java_library()"})," rules on which it depends."]}),"\n",(0,a.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"base_dep"}),": Rule (normally of type ",(0,a.jsx)(n.code,{children:"java_library"}),") that should be compiled and used as a base JAR to receive all dependencies through an append operation."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"blocklist"}),": A list of patterns that identify files to exclude from the final generated JAR file. Example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\njava_binary(\n  name = 'example',\n  blocklist = [\n    # Excludes com.example.A and com.example.Alligator,\n    # as well as their inner classes and any non-class files that happen to match\n    # the pattern\n    'com.example.A',\n\n    # Excludes all files from org/slf4j/**/*.\n    'org.slf4j',\n  ],\n  deps = [\n    ':example1',\n    ':third-party-stuff',\n  ],\n)\n\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"build_manifest"}),": MANIFEST containing stamped build attributes, that should be merged into the main jar manifest"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"concat_deps"}),": Use zip concatenation instead of repacking all dependency jars, which is faster"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"deps"}),": Rules (normally of type ",(0,a.jsx)(n.code,{children:"java_library"}),") that should be compiled and whose ",(0,a.jsx)(n.code,{children:".class"})," files and resources should be included in the generated JAR file."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"java_runtime"}),": Expected java version used at runtime"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"java_version"}),": Expected java version used at compile time"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"main_class"}),": If provided, this will be the value specified as the ",(0,a.jsx)(n.code,{children:"Main-Class"})," attribute of the ",(0,a.jsx)(n.code,{children:"META-INF/MANIFEST.MF"})," file in the generated JAR file. Also, when this rule is used as an executable in a ",(0,a.jsx)(n.code,{children:"genrule()"}),", ",(0,a.jsx)(n.code,{children:"main_class"})," will indicate the class whose ",(0,a.jsx)(n.code,{children:"main()"})," method will be invoked to process the command-line arguments. This is consistent with the expected usage of ",(0,a.jsx)(n.code,{children:"java -jar *<name.jar>* *<args>*"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"manifest_file"}),": If provided, this manifest will be used when generating the JAR file. If combined with ",(0,a.jsx)(n.code,{children:"main_class"}),", the specified manifest file will be used but the ",(0,a.jsx)(n.code,{children:"main_class"})," will override the main class in the manifest."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(96540);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);