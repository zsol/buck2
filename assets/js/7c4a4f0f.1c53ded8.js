"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[812],{28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>l});var i=r(96540);const n={},s=i.createContext(n);function a(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},89129:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"prelude/rules/erlang/erlang_otp_binaries","title":"erlang_otp_binaries","description":"erlang\\\\otp\\\\binaries","source":"@site/../docs/prelude/rules/erlang/erlang_otp_binaries.md","sourceDirName":"prelude/rules/erlang","slug":"/prelude/rules/erlang/erlang_otp_binaries","permalink":"/docs/prelude/rules/erlang/erlang_otp_binaries","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"erlang_escript","permalink":"/docs/prelude/rules/erlang/erlang_escript"},"next":{"title":"erlang_release","permalink":"/docs/prelude/rules/erlang/erlang_release"}}');var n=r(74848),s=r(28453);r(56289);const a={},l="erlang_otp_binaries",o={},c=[{value:"erlang_otp_binaries",id:"erlang_otp_binaries-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"erlang_otp_binaries",children:"erlang_otp_binaries"})}),"\n",(0,n.jsx)(t.h2,{id:"erlang_otp_binaries-1",children:"erlang_otp_binaries"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'def erlang_otp_binaries(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    contacts: list[str] = [],\n    erl: str,\n    erlc: str,\n    escript: str,\n    labels: list[str] = [],\n    os_env: None | dict[str, str] = None,\n) -> None\n'})}),"\n",(0,n.jsx)(t.p,{children:"This target defines the executables for the Erlang toolchains, and is required to defined a toolchain."}),"\n",(0,n.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"erl"}),": Reference to ",(0,n.jsx)(t.code,{children:"erl"})," binary"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"erlc"}),": Reference to ",(0,n.jsx)(t.code,{children:"erlc"})," binary"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"escript"}),": Reference to ",(0,n.jsx)(t.code,{children:"escript"})," binary"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"os_env"}),": This attribute allows to set additional values for the operating system environment for invocations to the Erlang toolchain."]}),"\n"]}),"\n",(0,n.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,n.jsx)(t.p,{children:"Examples:"}),"\n",(0,n.jsx)(t.p,{children:'erlang_otp_binaries(\nname = "local",\nerl = "local/erl",\nerlc = "local/erlc",\nescript = "local/escript",\n)'})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);