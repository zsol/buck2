"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6738],{28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var n=i(96540);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}},97743:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"prelude/rules/android/gen_aidl","title":"gen_aidl","description":"gen\\\\_aidl","source":"@site/../docs/prelude/rules/android/gen_aidl.md","sourceDirName":"prelude/rules/android","slug":"/prelude/rules/android/gen_aidl","permalink":"/docs/prelude/rules/android/gen_aidl","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"apk_genrule","permalink":"/docs/prelude/rules/android/apk_genrule"},"next":{"title":"keystore","permalink":"/docs/prelude/rules/android/keystore"}}');var s=i(74848),r=i(28453);i(56289);const a={},l="gen_aidl",d={},o=[{value:"gen_aidl",id:"gen_aidl-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"gen_aidl",children:"gen_aidl"})}),"\n",(0,s.jsx)(t.h2,{id:"gen_aidl-1",children:"gen_aidl"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'def gen_aidl(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _android_toolchain: str = "gh_facebook_buck2_shims_meta//:android",\n    _apple_platforms: dict[str, str] = {},\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java_for_android",\n    aidl: str,\n    aidl_srcs: list[str] = [],\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    import_path: str = "",\n    import_paths: list[str] = [],\n    labels: list[str] = [],\n    licenses: list[str] = [],\n) -> None\n'})}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"gen_aidl()"})," rule is used to generate ",(0,s.jsx)(t.code,{children:".java"})," files from ",(0,s.jsx)(t.code,{children:".aidl"})," files."]}),"\n",(0,s.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"aidl"}),": The path to an ",(0,s.jsx)(t.code,{children:".aidl"})," file to convert to a ",(0,s.jsx)(t.code,{children:".java"})," file."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"aidl_srcs"}),": Path to ",(0,s.jsx)(t.code,{children:".aidl"})," files the target ",(0,s.jsx)(t.code,{children:"aidl"})," file imports."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"deps"}),": A list of rules that must be built before this rule."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"import_path"}),": The search path for import statements for the aidl command. (This is the ",(0,s.jsx)(t.code,{children:"-I"})," argument when invoking aidl from the command line. For many apps it will be the base dir where all aidl files are, with project root as its parent, e.g. ",(0,s.jsx)(t.code,{children:"app/src/main/aidl"}),".). This is the same as the path to the ",(0,s.jsx)(t.code,{children:"aidl"})," file relative to what would be returned from ",(0,s.jsx)(t.code,{children:"root"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\nandroid_library(\n  name = 'lib',\n  srcs = glob(['**/*.java']) + [':aidl'],\n  manifest = '//res/org/opencv:manifest',\n  deps = [\n    '//res/org/opencv:res',\n  ],\n  visibility = [ 'PUBLIC' ],\n)\n\ngen_aidl(\n    name = 'aidl',\n    aidl = 'engine/OpenCVEngineInterface.aidl',\n    import_path = 'java/',\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);