"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9200],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},83061:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"prelude/rules/kotlin/kotlin_test","title":"kotlin_test","description":"kotlin\\\\_test","source":"@site/../docs/prelude/rules/kotlin/kotlin_test.md","sourceDirName":"prelude/rules/kotlin","slug":"/prelude/rules/kotlin/kotlin_test","permalink":"/docs/prelude/rules/kotlin/kotlin_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"kotlin_library","permalink":"/docs/prelude/rules/kotlin/kotlin_library"},"next":{"title":"lua","permalink":"/docs/prelude/rules/lua/"}}');var i=s(74848),r=s(28453);s(56289);const o={},l="kotlin_test",a={},c=[{value:"kotlin_test",id:"kotlin_test-1",level:2},{value:"Parameters",id:"parameters",level:4}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kotlin_test",children:"kotlin_test"})}),"\n",(0,i.jsx)(n.h2,{id:"kotlin_test-1",children:"kotlin_test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def kotlin_test(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _build_only_native_code: bool = select({"prelude//android/constraints:build_only_native_code": True, "DEFAULT": False}),\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _inject_test_env: str = "prelude//test/tools:inject_test_env",\n    _is_building_android_binary: bool = False,\n    _java_test_toolchain: str = "gh_facebook_buck2_shims_meta//:java_test",\n    _java_toolchain: str = "gh_facebook_buck2_shims_meta//:java",\n    _kotlin_toolchain: str = "gh_facebook_buck2_shims_meta//:kotlin",\n    _remote_test_execution_toolchain: str = "gh_facebook_buck2_shims_meta//:remote_test_execution",\n    _test_toolchain: str = "gh_facebook_buck2_shims_meta//:test",\n    abi_generation_mode: None | str = None,\n    annotation_processing_tool: None | str = None,\n    annotation_processor_deps: list[str] = [],\n    annotation_processor_params: list[str] = [],\n    annotation_processors: list[str] = [],\n    contacts: list[str] = [],\n    cxx_library_allowlist: list[str] = [],\n    default_cxx_platform: None | str = None,\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    deps_query: None | str = None,\n    enable_used_classes: bool = True,\n    env: dict[str, str] = {},\n    exported_deps: list[str] = [],\n    exported_provided_deps: list[str] = [],\n    extra_arguments: list[str] = [],\n    extra_kotlinc_arguments: list[str] = [],\n    fork_mode: str = "none",\n    friend_paths: list[str] = [],\n    incremental: bool = True,\n    java: None | str = None,\n    java_agents: list[str] = [],\n    java_version: None | str = None,\n    javac: None | str = None,\n    k2: bool = False,\n    kotlin_compiler_plugins: list[(str, dict[str, str])] = [],\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    manifest_file: None | str = None,\n    maven_coords: None | str = None,\n    never_mark_as_unused_dependency: None | bool = None,\n    non_exec_dep_plugins_deprecated: list[str | (str, list[str])] = [],\n    on_unused_dependencies: None | str = None,\n    plugins: list[str | (str, list[str])] = [],\n    proguard_config: None | str = None,\n    provided_deps: list[str] = [],\n    remote_execution: None | str | dict[str, None | bool | int | str | list[dict[str, str]] | dict[str, str | list[str]]] = None,\n    remove_classes: list[str] = [],\n    required_for_source_only_abi: bool = False,\n    resources: list[str] = [],\n    resources_root: None | str = None,\n    run_test_separately: bool = False,\n    runtime_deps: list[str] = [],\n    source: None | str = None,\n    source_abi_verification_mode: None | str = None,\n    source_only_abi_deps: list[str] = [],\n    srcs: list[str] = [],\n    std_err_log_level: None | int | str = None,\n    std_out_log_level: None | int | str = None,\n    target: None | str = None,\n    test_case_timeout_ms: None | int = None,\n    test_class_names_file: None | str = None,\n    test_rule_timeout_ms: None | int = None,\n    test_type: None | str = None,\n    unbundled_resources_root: None | str = None,\n    use_cxx_libraries: None | bool = None,\n    use_dependency_order_classpath: None | bool = None,\n    use_jvm_abi_gen: None | bool = None,\n    vm_args: list[str] = [],\n) -> None\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"kotlin_test()"})," rule is used to define a set of ",(0,i.jsx)(n.code,{children:".kt"})," files that contain tests to run via JUnit."]}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cxx_library_allowlist"}),": List of cxx_library targets to build, if use_cxx_libraries is true. This can be useful if some dependencies are Android-only and won't build for the test host platform."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"deps"}),": Same as ",(0,i.jsx)(n.code,{children:"kotlin_library()"}),". // org.junit.rules.Timeout was not introduced until 4.7. Must include JUnit (version 4.7 or later) as a dependency for JUnit tests. Must include TestNG (version 6.2 or later) and hamcrest as a dependencies for TestNG tests."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"enable_used_classes"}),": Deprecated: for an experiment only, will be removed"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"env"}),": A map of environment names and values to set when running the test."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fork_mode"}),": Controls whether tests will all be run in the same process or a process will be started for each set of tests in a class."]}),"\n",(0,i.jsxs)(n.p,{children:["(This is mainly useful when porting Java tests to Buck from Apache Ant which\nallows JUnit tasks to set a ",(0,i.jsx)(n.code,{children:'fork="yes"'})," property. It should not be\nused for new tests since it encourages tests to not cleanup after themselves and\nincreases the tests' computational resources and running time.)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"none"}),"\nAll tests will run in the same process.\n",(0,i.jsx)(n.code,{children:"per_test"}),"\nA process will be started for each test class in which all tests of that test class\nwill run."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"incremental"}),": Enables Kotlin incremental compilation."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"javac"}),": Specifies the Java compiler program to use for this rule. The value is a source path or an execution dep (e.g., //foo/bar",":bar",'). Overrides the value in "javac" in the "tools" section of ',(0,i.jsx)(n.code,{children:".buckconfig"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"k2"}),": Enables the Kotlin K2 compiler."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"kotlin_compiler_plugins"}),": Use this to specify ",(0,i.jsx)(n.a,{href:"https://kotlinlang.org/docs/reference/compiler-plugins.html",children:"Kotlin compiler plugins"})," to use when compiling this library. This takes a map, with each entry specify one plugin. Entry's key is plugin source path, and value is a map of plugin option key value pair. Unlike ",(0,i.jsx)(n.code,{children:"extra_kotlinc_arguments"}),", these can be ",(0,i.jsx)(n.em,{children:"source paths"}),", not just strings."]}),"\n",(0,i.jsxs)(n.p,{children:["A special option value is\n",(0,i.jsx)(n.code,{children:"__codegen_dir__"}),", in which case Buck will provide a default codegen folder's path as\noption value instead.\nE.g."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'fbcode/buck2/prelude/decls/jvm_common.bzl\nkotlin_compiler_plugins = {\n    "somePluginSourcePath": {\n        "plugin:somePluginId:somePluginOptionKey": "somePluginOptionValue",\n        "plugin:somePluginId:someDirectoryRelatedOptionKey": "__codegen_dir__",\n    },\n},\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Each plugin source path will be prefixed with ",(0,i.jsx)(n.code,{children:"-Xplugin="})," and passed as extra\narguments to the compiler. Plugin options will be appended after its plugin with ",(0,i.jsx)(n.code,{children:"-P"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A specific example is, if you want to use ",(0,i.jsx)(n.a,{href:"https://github.com/Kotlin/kotlinx.serialization",children:"kotlinx.serialization"}),"\nwith ",(0,i.jsx)(n.code,{children:"kotlin_library()"}),", you need to specify ",(0,i.jsx)(n.code,{children:"kotlinx-serialization-compiler-plugin.jar"})," under ",(0,i.jsx)(n.code,{children:"kotlin_compiler_plugins"})," and ",(0,i.jsx)(n.code,{children:"kotlinx-serialization-runtime.jar"})," (which you may have to fetch from Maven) in your ",(0,i.jsx)(n.code,{children:"deps"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\nkotlin_library(\n    name = "example",\n    srcs = glob(["*.kt"]),\n    deps = [\n        ":kotlinx-serialization-runtime",\n    ],\n    kotlin_compiler_plugins = {\n        # Likely copied from your $KOTLIN_HOME directory.\n        "kotlinx-serialization-compiler-plugin.jar": {},\n    },\n)\n\nprebuilt_jar(\n    name = "kotlinx-serialization-runtime",\n    binary_jar = ":kotlinx-serialization-runtime-0.10.0",\n)\n\n# Note you probably want to set\n# maven_repo=http://jcenter.bintray.com/ in your .buckconfig until\n# https://github.com/Kotlin/kotlinx.serialization/issues/64\n# is closed.\nremote_file(\n    name = "kotlinx-serialization-runtime-0.10.0",\n    out = "kotlinx-serialization-runtime-0.10.0.jar",\n    url = "mvn:org.jetbrains.kotlinx:kotlinx-serialization-runtime:jar:0.10.0",\n    sha1 = "23d777a5282c1957c7ce35946374fff0adab114c"\n)\n\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"labels"}),": A list of labels to be applied to these tests. These labels are arbitrary text strings and have no meaning within buck itself. They can, however, have meaning for you as a test author (e.g., ",(0,i.jsx)(n.code,{children:"smoke"})," or ",(0,i.jsx)(n.code,{children:"fast"}),"). A label can be used to filter or include a specific test rule when executing ",(0,i.jsx)(n.code,{children:"buck test"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"non_exec_dep_plugins_deprecated"}),": Plugins that do not use the execution platform. This exists for historical reasons, and should not be used. Use ",(0,i.jsx)(n.code,{children:"plugins"})," instead - plugins should be configured for the execution platform since that is where they are used."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"plugins"}),": List of plugins that should be run during compilation of the target. A list of strings may additionally be provided in order to pass additional arguments to the plugin."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"resources"}),": Same as ",(0,i.jsx)(n.code,{children:"kotlin_library()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"srcs"}),": Like ",(0,i.jsx)(n.code,{children:"kotlin_library()"}),", all of the ",(0,i.jsx)(n.code,{children:".kt"})," files specified by the ",(0,i.jsx)(n.code,{children:"srcs"})," argument will be compiled when this rule is built. In addition, all of the corresponding ",(0,i.jsx)(n.code,{children:".class"})," files that are built by this rule will be passed as arguments to JUnit when this rule is run as a test. ",(0,i.jsx)(n.code,{children:".class"})," files that are passed to JUnit that do not have any methods annotated with ",(0,i.jsx)(n.code,{children:"@Test"})," are considered failed tests, so make sure that only test case classes are specified as ",(0,i.jsx)(n.code,{children:"srcs"}),". This is frequently done by specifying ",(0,i.jsx)(n.code,{children:"srcs"})," as ",(0,i.jsx)(n.code,{children:"glob(['**/*Test.kt'])"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"std_err_log_level"}),": Same as ",(0,i.jsx)(n.code,{children:"std_out_log_level"}),", but for std err."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"std_out_log_level"}),": Log level for messages from the source under test that buck will output to std out. Value must be a valid ",(0,i.jsx)(n.code,{children:"java.util.logging.Level"})," value."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"test_rule_timeout_ms"}),": If set specifies the maximum amount of time (in milliseconds) in which all of the tests in this rule should complete. This overrides the default ",(0,i.jsx)(n.code,{children:"rule_timeout"})," if any has been specified in ",(0,i.jsx)(n.code,{children:".buckconfig"})," ."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"test_type"}),": Specifies which test framework to use. The currently supported options are 'junit' and 'testng'."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"vm_args"}),": Runtime arguments to the JVM running the tests."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);