"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6300],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(96540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},34497:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"prelude/rules/core/worker_tool","title":"worker_tool","description":"worker\\\\_tool","source":"@site/../docs/prelude/rules/core/worker_tool.md","sourceDirName":"prelude/rules/core","slug":"/prelude/rules/core/worker_tool","permalink":"/docs/prelude/rules/core/worker_tool","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"versioned_alias","permalink":"/docs/prelude/rules/core/versioned_alias"},"next":{"title":"zip_file","permalink":"/docs/prelude/rules/core/zip_file"}}');var s=t(74848),o=t(28453);t(56289);const i={},l="worker_tool",a={},c=[{value:"worker_tool",id:"worker_tool-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"worker_tool",children:"worker_tool"})}),"\n",(0,s.jsx)(n.h2,{id:"worker_tool-1",children:"worker_tool"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def worker_tool(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _worker_tool_runner: str = "prelude//js/worker_runner:worker_tool_runner",\n    args: str | list[str] = [],\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    env: dict[str, str] = {},\n    exe: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    max_workers: None | int = None,\n    max_workers_per_thread_percent: None | int = None,\n    persistent: None | bool = None,\n) -> None\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Some external tools have high startup costs. To amortize those costs over the whole build rather than paying them for each rule invocation, use the ",(0,s.jsx)(n.code,{children:"worker_tool()"})," rule in conjunction with ",(0,s.jsx)(n.code,{children:"genrule()"}),". Buck then starts the external tool once and reuses it by communicating with it over ",(0,s.jsx)(n.code,{children:"stdin"})," and ",(0,s.jsx)(n.code,{children:"stdout"})," using a simple JSON protocol."]}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": name of the target"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"args"}),": A string of args that is passed to the executable represented by ",(0,s.jsx)(n.code,{children:"exe"})," on initial startup."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"env"}),": A map of environment variables that is passed to the executable represented by ",(0,s.jsx)(n.code,{children:"exe"})," on initial startup."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"exe"}),": A ",(0,s.jsx)(n.code,{children:"build target"})," for a rule that outputs an executable, such as an ",(0,s.jsx)(n.code,{children:"sh_binary()"}),". Buck runs this executable only once per build."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_workers"}),": The maximum number of workers of this type that Buck starts. Use ",(0,s.jsx)(n.code,{children:"-1"})," to allow the creation of as many workers as necessary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_workers_per_thread_percent"}),": The maximum ratio of workers of this type that Buck starts per thread, specified as a positive integer percentage (1-100). Must be greater than or equal to ",(0,s.jsx)(n.code,{children:"1"})," and less than or equal to ",(0,s.jsx)(n.code,{children:"100"}),". Only one of ",(0,s.jsx)(n.code,{children:"max_workers"})," and ",(0,s.jsx)(n.code,{children:"max_workers_per_thread_percent"})," may be specified."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"persistent"}),": If set to true, Buck does not restart the tool unless the tool itself changes. This means the tool persists across multiple Buck commands without being shut down and may see the same rule being built more than once. Be careful not to use this setting with tools that don't expect to process the same input\u2014with different contents\u2014twice!"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"details",children:"Details"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"worker_tool"})," rule can be referenced in the ",(0,s.jsx)(n.code,{children:"cmd"})," parameter of\na ",(0,s.jsx)(n.code,{children:"genrule"})," by using the macro:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n\n$(exe //path/to:target)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Examples:"}),"\n",(0,s.jsxs)(n.p,{children:["Consider the following ",(0,s.jsx)(n.code,{children:"build rules"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n#\n# Buck\n#\nworker_tool(\n  name = 'ExternalToolWorker',\n  exe = ':ExternalTool',\n  args = '--arg1 --arg2'\n)\n\nsh_binary(\n  name = 'ExternalTool',\n  main = 'external_tool.sh',\n)\n\ngenrule(\n  name = 'TransformA',\n  out = 'OutputA.txt',\n  cmd = '$(exe :ExternalToolWorker) argA',\n)\n\ngenrule(\n  name = 'TransformB',\n  out = 'OutputB.txt',\n  cmd = '$(exe :ExternalToolWorker) argB',\n)\n\ngenrule(\n  name = 'TransformC',\n  out = 'OutputC.txt',\n  cmd = '$(exe :ExternalToolWorker) argC',\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When doing a ",(0,s.jsx)(n.code,{children:"buck build"})," on all three of the above ",(0,s.jsx)(n.code,{children:"genrules"}),", Buck\nfirst creates the worker process by invoking:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n\n./external_tool.sh --arg1 --arg2\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Buck then communicates with this process using JSON over ",(0,s.jsx)(n.code,{children:"stdin"}),",\nstarting with a handshake:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n[\n  {\n    "id": 0,\n    "type": "handshake",\n    "protocol_version": "0",\n    "capabilities": []\n  }\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Buck then waits for the tool to reply on ",(0,s.jsx)(n.code,{children:"stdout"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n[\n  {\n    "id": 0,\n    "type": "handshake",\n    "protocol_version": "0",\n    "capabilities": []\n  }\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then, when building the first ",(0,s.jsx)(n.code,{children:"genrule"}),", Buck writes to ",(0,s.jsx)(n.code,{children:"stdin"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n  ,{\n    "id": 1,\n    "type": "command",\n    "args_path": "/tmp/1.args",\n    "stdout_path": "/tmp/1.out",\n    "stderr_path": "/tmp/1.err"\n  }\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The file ",(0,s.jsx)(n.code,{children:"/tmp/1.args"})," contains ",(0,s.jsx)(n.code,{children:"argA"}),". The tool should\nperform the necessary work for this job and then write the job's output to the files\nsupplied by Buck\u2014in this case, ",(0,s.jsx)(n.code,{children:"/tmp/1.out"})," and ",(0,s.jsx)(n.code,{children:"/tmp/1.err"}),".\nOnce the job is done, the tool should reply to Buck on ",(0,s.jsx)(n.code,{children:"stdout"})," with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n  ,{\n    "id": 1,\n    "type": "result",\n    "exit_code": 0\n  }\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Once Buck hears back from the first genrule's job, it submits the second genrule's job in the\nsame fashion and awaits the response. When the build is all finished,\nBuck closes the JSON by writing to ",(0,s.jsx)(n.code,{children:"stdin"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n]\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["which signals the tool that it should exit after replying on ",(0,s.jsx)(n.code,{children:"stdout"})," with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n]\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, Buck is guaranteed to invoke"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n\n./external_tool.sh --arg1 --arg2\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"only once during the build. The three jobs corresponding to the three genrules are submitted\nsynchronously to the single worker process."}),"\n",(0,s.jsxs)(n.p,{children:["Note that the ",(0,s.jsx)(n.code,{children:"id"})," values in the messages are not necessarily increasing or sequential,\nbut they do have to match between the request message and the response message of a given job as\nwell as in the initial handshake."]}),"\n",(0,s.jsx)(n.p,{children:"If the tool receives a message type it cannot interpret it should answer with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n{\n  "id": &ltn>,\n  "type": "error",\n  "exit_code": 1\n}\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the tool receives a message type it can interpret, but the other attributes of the\nmessage are in an inconsistent state, it should answer with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'\n{\n  "id": &ltn>,\n  "type": "error",\n  "exit_code": 2\n}\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);