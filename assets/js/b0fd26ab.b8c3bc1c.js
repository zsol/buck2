"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9298],{28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var s=i(96540);const r={},n=s.createContext(r);function a(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(n.Provider,{value:t},e.children)}},39322:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"prelude/rules/git/git_fetch","title":"git_fetch","description":"git\\\\_fetch","source":"@site/../docs/prelude/rules/git/git_fetch.md","sourceDirName":"prelude/rules/git","slug":"/prelude/rules/git/git_fetch","permalink":"/docs/prelude/rules/git/git_fetch","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"git","permalink":"/docs/prelude/rules/git/"},"next":{"title":"go","permalink":"/docs/prelude/rules/go/"}}');var r=i(74848),n=i(28453);i(56289);const a={},l="git_fetch",c={},o=[{value:"git_fetch",id:"git_fetch-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"git_fetch",children:"git_fetch"})}),"\n",(0,r.jsx)(t.h2,{id:"git_fetch-1",children:"git_fetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'def git_fetch(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _git_fetch_tool: str = "prelude//git/tools:git_fetch",\n    allow_cache_upload: bool = True,\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    repo: str,\n    rev: str,\n    sub_targets: list[str] = [],\n) -> None\n'})}),"\n",(0,r.jsx)(t.p,{children:"Checkout a commit from a git repository."}),"\n",(0,r.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"allow_cache_upload"}),": Whether the results of the fetch can be written to the action cache and CAS."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"repo"}),": Url suitable as a git remote."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"rev"}),": 40-digit hex SHA-1 of the git commit."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"sub_targets"}),": A list of paths within the remote repo to be made accessible as sub-targets. For example if we have a git_fetch with ",(0,r.jsx)(t.code,{children:'name = "serde.git"'})," and ",(0,r.jsx)(t.code,{children:'sub_targets = ["serde_derive"]'}),", then other targets would be able to refer to the serde_derive subdirectory of the repo as ",(0,r.jsx)(t.code,{children:'":serde.git[serde_derive]"'}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.p,{children:"Examples:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'git_fetch(\n    name = "serde.git",\n    repo = "https://github.com/serde-rs/serde",\n    rev = "fccb9499bccbaca0b7eef91a3a82dfcb31e0b149",\n)\n'})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);