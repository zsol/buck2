"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9536],{28453:(e,t,s)=>{s.d(t,{R:()=>n,x:()=>a});var i=s(96540);const r={},o=i.createContext(r);function n(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),i.createElement(o.Provider,{value:t},e.children)}},97378:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"prelude/rules/go/go_bootstrap_binary","title":"go_bootstrap_binary","description":"go\\\\bootstrap\\\\binary","source":"@site/../docs/prelude/rules/go/go_bootstrap_binary.md","sourceDirName":"prelude/rules/go","slug":"/prelude/rules/go/go_bootstrap_binary","permalink":"/docs/prelude/rules/go/go_bootstrap_binary","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"go_binary","permalink":"/docs/prelude/rules/go/go_binary"},"next":{"title":"go_exported_library","permalink":"/docs/prelude/rules/go/go_exported_library"}}');var r=s(74848),o=s(28453);s(56289);const n={},a="go_bootstrap_binary",l={},d=[{value:"go_bootstrap_binary",id:"go_bootstrap_binary-1",level:2},{value:"Parameters",id:"parameters",level:4}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"go_bootstrap_binary",children:"go_bootstrap_binary"})}),"\n",(0,r.jsx)(t.h2,{id:"go_bootstrap_binary-1",children:"go_bootstrap_binary"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'def go_bootstrap_binary(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _go_bootstrap_toolchain: str = "gh_facebook_buck2_shims_meta//:go_bootstrap",\n    build_args: list[str] = [],\n    srcs: list[str] = [],\n    workdir: str = "",\n) -> None\n'})}),"\n",(0,r.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"build_args"}),": Package name, file names and build flags"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"srcs"}),": The set of source files to be compiled by this rule. .go files will be compiled with the Go compiler, .s files will be compiled with the assembler, and everything else is assumed to be files that may be ",(0,r.jsx)(t.code,{children:"#include"}),"d by the assembler."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"workdir"}),": Change to subdir before running the command"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);