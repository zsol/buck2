"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8866],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(96540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},39493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"prelude/rules/core/http_archive","title":"http_archive","description":"http\\\\_archive","source":"@site/../docs/prelude/rules/core/http_archive.md","sourceDirName":"prelude/rules/core","slug":"/prelude/rules/core/http_archive","permalink":"/docs/prelude/rules/core/http_archive","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"genrule","permalink":"/docs/prelude/rules/core/genrule"},"next":{"title":"http_file","permalink":"/docs/prelude/rules/core/http_file"}}');var r=n(74848),s=n(28453);n(56289);const a={},l="http_archive",c={},o=[{value:"http_archive",id:"http_archive-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"http_archive",children:"http_archive"})}),"\n",(0,r.jsx)(t.h2,{id:"http_archive-1",children:"http_archive"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'def http_archive(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    excludes: list[str] = [],\n    exec_deps: str = "prelude//http_archive/tools:exec_deps",\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    out: None | str = None,\n    sha1: None | str = None,\n    sha256: None | str = None,\n    size_bytes: None | int = None,\n    strip_prefix: None | str = None,\n    sub_targets: list[str] | dict[str, list[str]] = [],\n    type: None | str = None,\n    urls: list[str] = [],\n    vpnless_urls: list[str] = [],\n) -> None\n'})}),"\n",(0,r.jsxs)(t.p,{children:["An ",(0,r.jsx)(t.code,{children:"http_archive()"})," rule is used to download and extract archives from the Internet to be used as dependencies for other rules. These rules are downloaded by running ",(0,r.jsx)(t.code,{children:"fetch"}),", or can be downloaded as part of ",(0,r.jsx)(t.code,{children:"build"})," by setting ",(0,r.jsx)(t.code,{children:".buckconfig"})]}),"\n",(0,r.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"excludes"}),": An optional list of regex patterns. All file paths in the extracted archive which match any of the given patterns will be omitted."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"exec_deps"}),": When using http_archive as an anon target, the rule invoking the anon target needs to mirror this attribute into its own attributes, and forward the provider into the anon target invocation."]}),"\n",(0,r.jsx)(t.p,{children:"When using http_archive normally not as an anon target, the\ndefault value is always fine."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"out"}),": An optional name to call the directory that the downloaded artifact is extracted into. Buck will generate a default name if one is not provided that uses the ",(0,r.jsx)(t.code,{children:"name"})," of the rule."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"sha256"}),": The ",(0,r.jsx)(t.a,{href:"//wikipedia.org/wiki/SHA-2",children:(0,r.jsx)(t.code,{children:"SHA-256"})})," hash of the downloaded artifact. Buck verifies this is correct and fails the fetch command if it doesn't match in order to guarantee repeatable builds."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"strip_prefix"}),": If set, files under this path will be extracted to the root of the output directory. Siblings or cousins to this prefix will not be extracted at all."]}),"\n",(0,r.jsx)(t.p,{children:"For example, if a tarball has the layout:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"foo/bar/bar-0.1.2/data.dat"}),"\n",(0,r.jsx)(t.li,{children:"foo/baz/baz-0.2.3"}),"\n",(0,r.jsx)(t.li,{children:"foo_prime/bar-0.1.2"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Only ",(0,r.jsx)(t.code,{children:"data.dat"})," will be extracted, and it will be extracted into the output\ndirectory specified in ",(0,r.jsx)(t.code,{children:"out"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"sub_targets"}),": A list of filepaths within the archive to be made accessible as sub-targets. For example if we have an http_archive with ",(0,r.jsx)(t.code,{children:'name = "archive"'})," and ",(0,r.jsx)(t.code,{children:'sub_targets = ["src/lib.rs"]'}),", then other targets would be able to refer to that file as ",(0,r.jsx)(t.code,{children:'":archive[src/lib.rs]"'}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Or, a dict of sub_target name to list of files to be in that subtarget.\nFor example, with"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'http_archive(\n    name = "archive",\n    ...\n    sub_targets = {\n        "group_1": ["a.txt", "b.txt"],\n        "a.txt": ["a.txt"]\n    },\n)\n'})}),"\n",(0,r.jsxs)(t.p,{children:["... you get two sub targets: ",(0,r.jsx)(t.code,{children:":archive[group_1]"})," consisting of two files, and\n",(0,r.jsx)(t.code,{children:":archive[a.txt]"})," consisting of one file."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"type"}),": Normally, archive type is determined by the file's extension. If ",(0,r.jsx)(t.code,{children:"type"})," is set, then autodetection is overridden, and the specified type is used instead."]}),"\n",(0,r.jsxs)(t.p,{children:["Supported values are: ",(0,r.jsx)(t.code,{children:"zip"}),", ",(0,r.jsx)(t.code,{children:"tar"}),", ",(0,r.jsx)(t.code,{children:"tar.gz"}),",\n",(0,r.jsx)(t.code,{children:"tar.bz2"}),", ",(0,r.jsx)(t.code,{children:"tar.xz"}),", and ",(0,r.jsx)(t.code,{children:"tar.zst"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"urls"}),': A list of urls to attempt to download from. They are tried in order, and subsequent ones are only tried if the download fails. If validation fails, a new URL is not used. Supported protocols are "http", "https", and "mvn".']}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"vpnless_urls"}),": Additional URLs from which this resource can be downloaded when off VPN. Meta-internal only."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"details",children:"Details"}),"\n",(0,r.jsx)(t.p,{children:"Examples:"}),"\n",(0,r.jsxs)(t.p,{children:["Using ",(0,r.jsx)(t.code,{children:"http_archive()"}),", third party packages can be downloaded from\nan ",(0,r.jsx)(t.code,{children:"https"})," URL and used in other library types."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"\nhttp_archive(\n  name = 'thrift-archive',\n  urls = [\n    'https://internal-mirror.example.com/bin/thrift-compiler-0.1.tar.gz.badextension',\n  ],\n  sha256 = '7baa80df284117e5b945b19b98d367a85ea7b7801bd358ff657946c3bd1b6596',\n  type='tar.gz',\n  strip_prefix='thrift-compiler-0.1'\n)\n\ngenrule(\n  name = 'thrift-compiler-bin',\n  out = 'thrift',\n  cmd = 'cp $(location :thrift-archive)/bin/thrift $OUT',\n  executable = True,\n)\n\ngenrule(\n  name=\"my-thrift-lib-cpp2\",\n  cmd=\"$(exe :thrift-compiler-bin) --gen cpp2 -o $OUT $(location //:thrift-file)\",\n  out=\"gen-cpp2\",\n)\n\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);