"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5374],{28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>l});var i=t(96540);const r={},n=i.createContext(r);function o(e){const s=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(n.Provider,{value:s},e.children)}},34636:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"prelude/rules/go/go_exported_library","title":"go_exported_library","description":"go\\\\exported\\\\library","source":"@site/../docs/prelude/rules/go/go_exported_library.md","sourceDirName":"prelude/rules/go","slug":"/prelude/rules/go/go_exported_library","permalink":"/docs/prelude/rules/go/go_exported_library","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"go_bootstrap_binary","permalink":"/docs/prelude/rules/go/go_bootstrap_binary"},"next":{"title":"go_library","permalink":"/docs/prelude/rules/go/go_library"}}');var r=t(74848),n=t(28453);t(56289);const o={},l="go_exported_library",a={},d=[{value:"go_exported_library",id:"go_exported_library-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"go_exported_library",children:"go_exported_library"})}),"\n",(0,r.jsx)(s.h2,{id:"go_exported_library-1",children:"go_exported_library"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'def go_exported_library(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _asan: bool = select({"prelude//go/constraints:asan_false": False, "prelude//go/constraints:asan_true": True, "DEFAULT": False}),\n    _build_info: dict[str, typing.Any] = {},\n    _build_tags: list[str] = [],\n    _cxx_toolchain: str = "gh_facebook_buck2_shims_meta//:cxx",\n    _exec_os_type: str = "prelude//os_lookup/targets:os_lookup",\n    _go_stdlib: str = "prelude//go/tools:stdlib",\n    _go_toolchain: str = "gh_facebook_buck2_shims_meta//:go",\n    _race: bool = select({"prelude//go/constraints:race_false": False, "prelude//go/constraints:race_true": True, "DEFAULT": False}),\n    asan: bool = False,\n    assembler_flags: list[str] = [],\n    build_mode: str,\n    build_tags: list[str] = [],\n    cgo_enabled: None | bool = None,\n    compiler_flags: list[str] = [],\n    contacts: list[str] = [],\n    cxx_compiler_flags: list[str] = [],\n    cxx_preprocessor_flags: list[str] = [],\n    default_host_platform: None | str = None,\n    deps: list[str] = [],\n    embedcfg: None | str = None,\n    external_linker_flags: list[str] = [],\n    generate_exported_header: bool = False,\n    header_namespace: None | str = None,\n    headers: list[str] | dict[str, str] = [],\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    link_mode: None | str = None,\n    link_style: None | str = None,\n    linker_flags: list[str] = [],\n    package_name: None | str = None,\n    package_root: None | str = None,\n    platform: None | str = None,\n    race: bool = False,\n    resources: list[str] = [],\n    srcs: list[str] = [],\n) -> None\n'})}),"\n",(0,r.jsxs)(s.p,{children:["A go_exported_library() rule builds a C library from the supplied set of Go source files and dependencies. This is done via ",(0,r.jsx)(s.code,{children:"-buildmode"}),' flag and "//export" annotations in the code.']}),"\n",(0,r.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"name"}),": name of the target"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"_build_info"}),": Build info that is passed along here will be late-stamped into a fb_build_info section on the output binary"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"asan"}),": If true, enable ASAN."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"assembler_flags"}),": The set of additional assembler flags to pass to ",(0,r.jsx)(s.code,{children:"go tool asm"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"build_mode"}),": Determines the build mode (equivalent of ",(0,r.jsx)(s.code,{children:"-buildmode"}),"). Can be one of the following values: ",(0,r.jsx)(s.code,{children:"c_archive"}),", ",(0,r.jsx)(s.code,{children:"c_shared"}),". This argument is valid only if at there is at least one ",(0,r.jsx)(s.code,{children:"cgo_library declared in deps. In addition you should make sure that "}),"-shared",(0,r.jsx)(s.code,{children:"flag is added to"}),"compiler_flags",(0,r.jsx)(s.code,{children:"and go version under"}),"go.goroot",(0,r.jsx)(s.code,{children:"is compiled with that flag present in:"}),"gcflags",(0,r.jsx)(s.code,{children:", "}),"ldflags",(0,r.jsx)(s.code,{children:"and"}),"asmflags``"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"build_tags"}),": Build tags to apply to this target and its dependencies."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"cgo_enabled"}),": Analog of CGO_ENABLED env-var, applies to this target and its dependencies. If None it will depend on the availability of CXX toolchain."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"compiler_flags"}),": The set of additional compiler flags to pass to ",(0,r.jsx)(s.code,{children:"go tool compile"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"cxx_compiler_flags"}),": GCC/Clang flags to use when compiling any of the above C/C++ sources (which require compilation)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"cxx_preprocessor_flags"}),": GCC/Clang flags to use when preprocessing any of the above C/C++ sources (which require preprocessing)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"deps"}),": The set of dependencies of this rule. Currently, this only supports go_library rules."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"external_linker_flags"}),": Extra external linker flags passed to go link via ",(0,r.jsx)(s.code,{children:"-extld"})," argument."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"generate_exported_header"}),": Generate header file with declaration for functions exported with ",(0,r.jsx)(s.code,{children:"//export"})," The header name for target ",(0,r.jsx)(s.code,{children:"cell//foo/bar:lib"})," will be ",(0,r.jsx)(s.code,{children:"foo/bar/lib.h"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"header_namespace"}),": A path prefix when including headers of this target. Defaults to the path from the root of the repository to the directory where this target is defined. Can contain forward slashes (",(0,r.jsx)(s.code,{children:"/"}),"), but cannot start with one. See ",(0,r.jsx)(s.code,{children:"headers"})," for more information."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"headers"}),": The set of header files that are made available for inclusion to the source files in this target. These should be specified as either a list of header files or a dictionary of header names to header files. The header name can contain forward slashes (",(0,r.jsx)(s.code,{children:"/"}),"). The headers can be included with ",(0,r.jsx)(s.code,{children:'#include "$HEADER_NAMESPACE/$HEADER_NAME"'})," or ",(0,r.jsx)(s.code,{children:"#include <$HEADER_NAMESPACE/$HEADER_NAME>"})," , where ",(0,r.jsx)(s.code,{children:"$HEADER_NAMESPACE"})," is the value of the target's ",(0,r.jsx)(s.code,{children:"header_namespace"}),"  attribute, and ",(0,r.jsx)(s.code,{children:"$HEADER_NAME"})," is the header name if specified, and the filename of the header file otherwise. See ",(0,r.jsx)(s.code,{children:"header_namespace"})," for more information."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"link_mode"}),": Determines the link mode (equivalent of ",(0,r.jsx)(s.code,{children:"-mode"}),"). Can be one of the following values: ",(0,r.jsx)(s.code,{children:"internal"}),", ",(0,r.jsx)(s.code,{children:"external"}),". If no value is provided, the mode is set automatically depending on the other args."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"link_style"}),": Determines whether to build and link this rule's dependencies statically or dynamically. Can be one of the following values: ",(0,r.jsx)(s.code,{children:"static"}),", ",(0,r.jsx)(s.code,{children:"static_pic"})," or ",(0,r.jsx)(s.code,{children:"shared"}),". This argument is relevant only if the cgo extension is enabled. Otherwise, Buck ignores this argument."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"linker_flags"}),": Extra linker flags passed to go link"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"package_name"}),': Sets the full name of the package being compiled. This defaults to the path from the buck root. (e.g. given a ./.buckconfig, a rule in ./a/b/BUCK defaults to package "a/b")']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"package_root"}),': Sets Go package direactory (relative to BUCK file). By default (or if None passes) package_root is being detected automatically. Empty string of Go package is on the same level as BUCK file otherwise the subdirectory name. Example for srcs = ["foo/bar.go"], package_root = "foo"']}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"race"}),": If true, enable data race detection."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"resources"}),": Static files to be symlinked into the working directory of the test. You can access these in your by opening the files as relative paths, e.g. ",(0,r.jsx)(s.code,{children:'ioutil.ReadFile("testdata/input")'}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"srcs"}),": The set of source files to be compiled by this rule. .go files will be compiled with the Go compiler, .s files will be compiled with the assembler, and everything else is assumed to be files that may be ",(0,r.jsx)(s.code,{children:"#include"}),"d by the assembler."]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"details",children:"Details"}),"\n",(0,r.jsx)(s.p,{children:"Examples:"}),"\n",(0,r.jsxs)(s.p,{children:["For more examples, check out our ",(0,r.jsx)(s.a,{href:"https://github.com/facebook/buck/tree/dev/test/com/facebook/buck/features/go/testdata",children:"integration tests"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'\ngo_exported_library(\n    name = "shared",\n    srcs = ["main.go"],\n    build_mode = "c_shared",\n    compiler_flags = ["-shared"],\n    deps = [":example"],\n)\n\ngo_library(\n    name = "example",\n    package_name = "cgo",\n    srcs = [\n        "export-to-c.go",  # file with //export annotations\n    ],\n    compiler_flags = [],\n    headers = [],\n)\n\ncxx_genrule(\n    name = "cgo_exported_headers",\n    out = "includes",\n    cmd = (\n        "mkdir -p $OUT && " +\n        "cat `dirname $(location :shared)`/includes/*.h > $OUT/_cgo_export.h"\n    ),\n)\n\nprebuilt_cxx_library(\n    name = "cxx_so_with_header",\n    header_dirs = [":cgo_exported_headers"],\n    shared_lib = ":shared",\n)\n\n'})})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);