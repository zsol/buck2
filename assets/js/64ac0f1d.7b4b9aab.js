"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9312],{25631:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"prelude/rules/core/zip_file","title":"zip_file","description":"zip\\\\_file","source":"@site/../docs/prelude/rules/core/zip_file.md","sourceDirName":"prelude/rules/core","slug":"/prelude/rules/core/zip_file","permalink":"/docs/prelude/rules/core/zip_file","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"ruleSidebar","previous":{"title":"worker_tool","permalink":"/docs/prelude/rules/core/worker_tool"},"next":{"title":"cxx","permalink":"/docs/prelude/rules/cxx/"}}');var s=t(74848),r=t(28453);t(56289);const l={},o="zip_file",a={},d=[{value:"zip_file",id:"zip_file-1",level:2},{value:"Parameters",id:"parameters",level:4},{value:"Details",id:"details",level:4}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"zip_file",children:"zip_file"})}),"\n",(0,s.jsx)(i.h2,{id:"zip_file-1",children:"zip_file"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-python",children:'def zip_file(\n    *,\n    name: str,\n    default_target_platform: None | str = None,\n    target_compatible_with: list[str] = [],\n    compatible_with: list[str] = [],\n    exec_compatible_with: list[str] = [],\n    visibility: list[str] = [],\n    within_view: list[str] = ["PUBLIC"],\n    metadata: OpaqueMetadata = {},\n    tests: list[str] = [],\n    modifiers: OpaqueMetadata = [],\n    _apple_platforms: dict[str, str] = {},\n    _zip_file_toolchain: str = "gh_facebook_buck2_shims_meta//:zip_file",\n    contacts: list[str] = [],\n    default_host_platform: None | str = None,\n    entries_to_exclude: list[str] = [],\n    hardcode_permissions_for_deterministic_output: None | bool = None,\n    labels: list[str] = [],\n    licenses: list[str] = [],\n    on_duplicate_entry: str = "overwrite",\n    out: str = "",\n    srcs: list[str] = [],\n    zip_srcs: list[str] = [],\n) -> None\n'})}),"\n",(0,s.jsxs)(i.p,{children:["A ",(0,s.jsx)(i.code,{children:"zip_file()"})," allows builds to create basic zip files in a platform-agnostic way."]}),"\n",(0,s.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"name"}),": name of the target"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"default_target_platform"}),": specifies the default target platform, used when no platforms are specified on the command line"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"target_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with a configuration"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"exec_compatible_with"}),": a list of constraints that are required to be satisfied for this target to be compatible with an execution platform"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"visibility"}),": a list of visibility patterns restricting what targets can depend on this one"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"within_view"}),": a list of visibility patterns restricting what this target can depend on"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"metadata"}),": a key-value map of metadata associated with this target"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"tests"}),": a list of targets that provide tests for this one"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"modifiers"}),": an array of modifiers associated with this target"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"entries_to_exclude"}),": List of regex expressions that describe entries that should not be included in the output zip file."]}),"\n",(0,s.jsxs)(i.p,{children:["The regexes must be defined using ",(0,s.jsx)(i.code,{children:"java.util.regex.Pattern"})," syntax."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"hardcode_permissions_for_deterministic_output"}),": If set to true, Buck hardcodes the permissions in order to ensures that all files have the same permissions regardless of the platform on which the zip was generated."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"on_duplicate_entry"}),": Action performed when Buck detects that zip_file input contains multiple entries with the same name."]}),"\n",(0,s.jsx)(i.p,{children:"The valid values are:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"overwrite"})," (default): the last entry overwrites all previous entries with\nthe same name."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"append"}),": all entries are added to the output file."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"fail"}),": fail the build when duplicate entries are present."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"out"}),": The name of the zip file that should be generated. This allows builds to use a meaningful target name coupled with a meaningful zip file name. The default value takes the rule's ",(0,s.jsx)(i.code,{children:"name"})," and appends ",(0,s.jsx)(i.code,{children:".zip"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"srcs"}),": The set of files to include in the zip."]}),"\n",(0,s.jsxs)(i.p,{children:["Each ",(0,s.jsx)(i.code,{children:"src"})," will be added to the zip as follows:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["If the ",(0,s.jsx)(i.code,{children:"src"})," is the output of another rule, the output\nwill be included using just the output's file name."]}),"\n",(0,s.jsxs)(i.li,{children:["If the ",(0,s.jsx)(i.code,{children:"src"})," is a file relative to the rule's\ndeclaration, it will be included in the zip with its relative file\nname."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"zip_srcs"}),": The set of zip files whose content to include in the output zip file."]}),"\n",(0,s.jsxs)(i.p,{children:["Note that the order of files in ",(0,s.jsx)(i.code,{children:"zip_srcs"})," matters because the same zip entry can be\nincluded from multiple files. See the ",(0,s.jsx)(i.code,{children:"on_duplicate_entry"})," argument to learn how to\ncontrol the behavior when there are multiple entries with the same name."]}),"\n",(0,s.jsxs)(i.p,{children:["The entries from ",(0,s.jsx)(i.code,{children:"zip_srcs"})," are added before files from ",(0,s.jsx)(i.code,{children:"srcs"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"details",children:"Details"}),"\n",(0,s.jsx)(i.p,{children:"Examples:"}),"\n",(0,s.jsx)(i.p,{children:"This example will create a simple zip file."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:'\nzip_file(\n  # The output will be "example.zip"\n  name = \'example\',\n  srcs =\n    # These files will be found in the zip under "dir/"\n    glob([\'dir/**/*\']) +\n    [\n      # Imagine this generates the output\n      # "buck-out/gen/foo/hello.txt". This output will\n      # be found in the zip at "hello.txt"\n      \'//some/other:target\',\n\n    ],\n  zip_srcs = [\n     # The contents of this zip will be added to the generated zip.\n    \'amazing-library-1.0-sources.zip\',\n  ],\n  entries_to_exclude = [\n    "com/example/amazinglibrary/Source1.java",\n  ],\n)\n\n'})}),"\n",(0,s.jsxs)(i.p,{children:['If you were to examine the generated zip, the contents would look\nsomething like (assuming the output of\n"',(0,s.jsx)(i.code,{children:"//some/other:target"}),"\" was a file who's path ended with\n",(0,s.jsx)(i.code,{children:"hello.txt"}),', the "',(0,s.jsx)(i.code,{children:"dir"}),'" glob found two files,\nand "',(0,s.jsx)(i.code,{children:"amazing-library-1.0-sources.zip"}),'" contained two Java\nsource files):']}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"\ndir/file1.txt\ndir/subdir/file2.txt\nhello.txt\ncom/example/amazinglibrary/Source2.java\n\n"})})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>o});var n=t(96540);const s={},r=n.createContext(s);function l(e){const i=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);